;Name: TOTP WristApp
;Version: TOTP
;Description: TOTP WristApp - by Roberto Abdelkader Martinez Perez
;This is a TOTP generator wristapp for the Timex Datalink, providing secure
;two-factor authentication by generating time-based one-time passwords
;compatible with TOTP-enabled services.
;
;TIP:  Download your watch faster:  Download a WristApp once, then do not send it again.  It stays in the watch!
INCLUDE         "WRISTAPP.I"

;
; Memory Segments Utilization for TOTP Calculator SHA1 Calculations
; -----------------------------------------------------------------
; The memory segments listed below are leveraged during the SHA1 hash
; calculations for the TOTP calculator. These segments are temporarily
; repurposed to accommodate variables specific to the TOTP calculation process,
; alongside their original intended usage.
;
; Segment $043a-$0462 (40 bytes)
;   - Original Usage:
;       - BUF_PHONENUM (12 bytes): Initially reserved for phone number storage.
;       - EXTRACTBUF (28 bytes): Allocated for data extraction. Documentation
;           discrepancies note it as 32 or 31 bytes. However, practical use
;           determines it effectively as 31 bytes since clearing the 32nd byte
;           also clears the first alarm hours field.
;   - TOTP Variables:
;       - V_A to V_F (6 variables * 4 bytes each): Variables used in
;           intermediate steps of SHA1 calculations.
;       - V_K (4 bytes): Additional variable for SHA1 computation.
;       - V_TEMP (4 bytes): Temporary storage during calculations.
;       - V_TEMP2 (4 bytes): Additional temporary storage during calculations.
;
;     Note: Of the allocated 40 bytes, 36 are used for TOTP variables (V_A-V_F,
;     V_K, V_TEMP, V_TEMP2) during SHA1 calculations. The original variables
;     (BUF_PHONENUM, EXTRACTBUF) are key for EEPROM data recovery outside these
;     computations.
;
; Segment $04d2 (32 bytes)
;   - Original Usage:
;       - MSGBUF (32 bytes): Reserved for message buffering.
;         Note: No adverse effects observed when clearing up to 40 bytes,
;         suggesting some flexibility in the original design.
;   - TOTP Variables:
;       - H_0 to H_4 (5 variables * 4 bytes each): Variables for storing
;           intermediate hash values.
;       - H2_0 to H2_4 (5 variables * 4 bytes each): Additional variables for
;           hash computations, used in the HMAC-SHA1 algorithm.
;     Note: Exactly 40 bytes are used for these TOTP variables, fully utilizing
;     the segment during the SHA1 hash calculation phase.
;
; This repurposing of memory segments allows for efficient use of available
; resources for TOTP SHA1 hash calculations without interfering with the
; original intended uses of these memory areas.
;

V_A                 EQU     $043a
V_B                 EQU     $043e
V_C                 EQU     $0442
V_D                 EQU     $0446
V_E                 EQU     $044a
V_F                 EQU     $044e
V_K                 EQU     $0452
V_TEMP              EQU     $0456

H_0                 EQU     $04d2
H_1                 EQU     $04d6
H_2                 EQU     $04da
H_3                 EQU     $04de
H_4                 EQU     $04e2
H2_0                EQU     $04e6
H2_1                EQU     $04ea
H2_2                EQU     $04ee
H2_3                EQU     $04f2
H2_4                EQU     $04f6

COPYOP_OFFSET   EQU     (OP_SAVE-OP_CB)-1       ; No callback
ROLOP_OFFSET    EQU     (ROL_CB-OP_CB)-1        ; No parameters
NOTOP_OFFSET    EQU     (NOT_CB-OP_CB)-1        ; No parameters
SETOP_OFFSET    EQU     (SET_CB-OP_CB)-1        ; 1-byte parameter  @ LHS_ADDRLO
ADDOP_OFFSET    EQU     (ADD_CB-OP_CB)-1        ; 2-byte parameters @ LHS_ADDRHI, LHS_ADDRLO
SUBOP_OFFSET    EQU     (SUB_CB-OP_CB)-1        ; 2-byte parameters @ LHS_ADDRHI, LHS_ADDRLO
ANDOP_OFFSET    EQU     (AND_CB-OP_CB)-1        ; 2-byte parameters @ LHS_ADDRHI, LHS_ADDRLO
OROP_OFFSET     EQU     (OR_CB-OP_CB)-1         ; 2-byte parameters @ LHS_ADDRHI, LHS_ADDRLO
XOROP_OFFSET    EQU     (XOR_CB-OP_CB)-1        ; 2-byte parameters @ LHS_ADDRHI, LHS_ADDRLO

MAX_0BYTE_OP    EQU     NOTOP_OFFSET+1
MAX_1BYTE_OP    EQU     SETOP_OFFSET+1

;
; Multi-byte operation codes
;
COPYOP          EQU     0
ROLOP           EQU     1
NOTOP           EQU     2
SETOP           EQU     3
ADDOP           EQU     4
SUBOP           EQU     5
ANDOP           EQU     6
OROP            EQU     7
XOROP           EQU     8

OFFSET          EQU     $60
COUNTDOWN       EQU     $61

LHS_ADDRHI      EQU     $62
LHS_ADDRLO      EQU     $63

START           EQU     *
;
; (2) System entry point vectors
;
L0110:          jmp     MAIN       ; The main entry point - WRIST_MAIN
L0113:          rts                ; Called when we are suspended for any reason - WRIST_SUSPEND
                nop
                nop
L0116:          jmp     SECTIC     ; Called to handle any timers or time events - WRIST_DOTIC
L0119:          rts                ; Called when the COMM app starts and we have timers pending - WRIST_INCOMM
                nop
                nop
L011c:          rts                ; Called when the COMM app loads new data - WRIST_NEWDATA
                nop
                nop

L011f:          lda     STATETAB0,X ; The state table get routine - WRIST_GETSTATE
                rts

L0123:          jmp     HANDLE_STATE0
                db      STATETAB0-STATETAB0

;
; (3) Program strings
;
S6_SECS:         timex6  "   SEC"
S6_TOTP:         timex6  " TOTP "
S8_GITHUB:       timex   " GITHUB "


;
; These addresses in conjunction with the OFFSET variable are used to
; calculate the absolute address to be used in different parts of the self
; modifying code.
;
LOADBYTE_ADDRHI     EQU     (LOADBYTE / $0100)
LOADBYTE_ADDRLO     EQU     (LOADBYTE & $00FF)

; ONE                 db      $aa,$ff,$00,$01

OPERATIONS      db      COPYOP_OFFSET & $ff
                db      ROLOP_OFFSET  & $ff
                db      NOTOP_OFFSET  & $ff
                db      SETOP_OFFSET  & $ff
                db      ADDOP_OFFSET  & $ff
                db      SUBOP_OFFSET  & $ff
                db      ANDOP_OFFSET  & $ff
                db      OROP_OFFSET   & $ff
                db      XOROP_OFFSET  & $ff

; BUFFER:             db      $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00

;
; <autogenerated>
; THIS SECTION IS AUTO-GENERATED *** DO NOT MODIFY ***
;

; TCOUNT is a 4 byte counter that is incremented every 30 seconds
; it is used as the counter for the TOTP algorithm.
%TCOUNT%

;
; </autogenerated>
;


;
; (4) State Table
;
STATETAB0:
                db      0
                db      EVT_ENTER,TIM_ONCE,0   ; Initial state
                db      EVT_RESUME,TIM_ONCE,0   ; Resume from a nested app
                db      EVT_DNNEXT,TIM2_8TIC,0   ; Next button
                db      EVT_MODE,TIM_ONCE,$FF   ; Mode button
                db      EVT_END


;
; (5) State Table 0 Handler
; This is called to process the state events.  We only see DNNEXT event
;
HANDLE_STATE0:
                bset    1,APP_FLAGS             ; Indicate that we can be suspended
                lda     BTNSTATE                ; Get the event
                cmp     #EVT_DNNEXT
                beq     TESTSTUFF
                ; fall into SHOWBANNER
CLEARIT         jsr     CLEARALL                ; Clear the display
SHOWBANNER      lda     #S6_TOTP-START          ; Get the offset for the second string
                jsr     PUT6MID                 ; and put it on the middle line
                lda     #SYS8_MODE              ; Get the system offset for the 'MODE' string
                jmp     PUTMSGBOT               ; and put it on the bottom line

; FIRSTSHOWCD     jsr     CLEARALL                ; Clear the display
; SHOWCOUNTDOWN
;                 lda     #S8_GITHUB-START
;                 jsr     BANNER8
; SHOWCODE        lda     #S6_SECS-START
;                 jsr     PUT6MID
;                 ldx     COUNTDOWN
;                 cpx     #10                     ; If the countdown is <= 10 seconds
;                 bls     BLINK_SECS              ; Blink the seconds position
;                 jsr     FMTXLEAD0                 ; Otherwise just print the number
;                 jsr     PUTMID12
;                 rts
; BLINK_SECS      ldx     #COUNTDOWN
;                 lda     #BLINK_MID12
;                 jsr     START_BLINKP
;                 bset    2,BTNFLAGS              ; Mark a blink routine as pending
;                 rts

; SHOWNOENTRIES   lda     #SYS6_NO
;                 jsr     PUTMSG1
;                 lda     #S6_TOTP-START
;                 jsr     PUT6MID
;                 lda     #SYS8_ENTRIES
;                 jmp     PUTMSGBOT

; DELETEENTRY     jmp     SAYHOLDTODELETE

TESTSTUFF
                lda     #(TCOUNT / $0100)
                ldx     #(TCOUNT & $00ff)
                bsr     SET_OP_DST
                bsr     SET_OP_RHS

                ; lda     #(ONE / $0100)
                ; sta     LHS_ADDRHI
                ; lda     #(ONE & $00ff)
                ; sta     LHS_ADDRLO


                ; lda     #$69
                ; sta     LHS_ADDRLO

                ; lda     #(ONE / $0100)
                ; sta     LHS_ADDRHI
                ; lda     #(ONE & $00ff)
                ; sta     LHS_ADDRLO

                ldx     #ROLOP
                bsr     DO_OP
                bra     DEBUGUNIX

FIRSTBYTE:      lda     #LOADBYTE_ADDRLO
                sub     OFFSET
                sta     LOADBYTE+1
                lda     #LOADBYTE_ADDRHI
                sbc     #0
                sta     LOADBYTE
                clr     OFFSET
NEXTBYTE:       ldx     OFFSET
LOADBYTE        EQU     *+1
                lda     $4000,X
                inc     OFFSET
GETBYTE:
                sta     DATDIGIT2               ; And save it away
                lsra                            ; Extract the high nibble
                lsra
                lsra
                lsra

                sta     DATDIGIT1               ; And save it
                lda     DATDIGIT2               ; Get the byte again
                and     #$0f                    ; Extract the low nibble
                sta     DATDIGIT2               ; And save it
                rts

DEBUGUNIX:      jsr     CLEARALL                ; Clear the display
                lda     #LOADBYTE-TCOUNT
                sta     OFFSET

                bsr     FIRSTBYTE
                jsr     PUTTOP12

                bsr     NEXTBYTE
                jsr     PUTTOP34

                bsr     NEXTBYTE
                jsr     PUTTOP56

                bsr     NEXTBYTE
                jmp     PUTMID12

;
; SET_OP_DST
;    Set the destination address for a multi-byte operation
;  Parameters:
;    A - The high byte of the destination address
;    X - The low byte of the destination address
;
SET_OP_DST:     sta     OP_DST_ADDRHI
                sta     ROL_EOR_ADDRHI
                sta     ROL_STA_ADDRHI
                stx     OP_DST_ADDRLO
                stx     ROL_EOR_ADDRLO
                stx     ROL_STA_ADDRLO
                rts

;
; SET_OP_RHS
;    Set the right hand side address for a multi-byte operation
;  Parameters:
;    A - The high byte of the right hand side address
;    X - The low byte of the right hand side address
;
SET_OP_RHS:     sta     OP_RHS_ADDRHI
                stx     OP_RHS_ADDRLO
                rts

;
; DO_OP
;    Perform a multi-byte operation.
;  Requires:
;    The destination address should have been set with the SET_OP_DST routine
;    The right hand side address (if needed) should have been set with the SET_OP_RHS routine
;  Parameters:
;    X - The operation to perform (See the multi-byte operation codes above)
;    LHS_ADDRHI - The high byte of the left hand side address (for 2-byte operations)
;    LHS_ADDRLO - The low byte of the left hand side address (for 1-byte and 2-byte operations)
;    OP_IDX - The number of bytes to operate on (4 by default and reset after every call)
;
DO_OP:          lda     OPERATIONS,X            ; Get the operation call back offset from the table
                sta     OP_CB                   ; Modify the OPERATION routine to call the right callback
                tax                             ; We need the callback offset in X to use it as an index
                cmp     #MAX_0BYTE_OP           ; Now depending on the operation we need to set the right parameters for the parameter setting
                blo     OP_READY                ; If it is a 0-byte operation we are done
                cmp     #MAX_1BYTE_OP           ; Is it a 1-byte operation?
                blo     OP_SET1                 ; If so we need to set the low byte of the left hand side address
OP_SET2:        lda     LHS_ADDRHI              ; Apparently it is a 2-byte operation. Get the high byte of the left hand side address
                sta     OP_CB+2,X               ; And set it in the callback
OP_SET1:        lda     LHS_ADDRLO              ; Get the low byte of the left hand side address
                sta     OP_CB+3,X               ; And set it in the callback
OP_READY:       txa                             ; We need back the operation in ACCA
                clc                             ; Some operations' logic depend on the carry flag being clear
OP_IDX          EQU     *+1                     ; <- Self modifying byte to set the number of bytes to operate on
                ldx     #4                      ; By default we are going to operate on 4 bytes
OP_REPEAT:      decx                            ; Decrement the counter by one
OP_RHS_ADDRHI   EQU     *+1                     ; <- Self modifying byte to set the high byte of the right hand side operand address
OP_RHS_ADDRLO   EQU     *+2                     ; <- Self modifying byte to set the low byte of the right hand side operand address
                lda     $C0DE,X                 ; Get the right hand side byte offset by X
OP_CB           EQU     *+1                     ; <- Self modifying byte to set the operation callback
                bsr     OP_SAVE                 ; Call the right operation callback
OP_DST_ADDRHI   EQU     *+1                     ; <- Self modifying byte to get the destination address
OP_DST_ADDRLO   EQU     *+2                     ; <- Self modifying byte to get the destination address
OP_SAVE:        sta     $C0DE,X                 ; Save the result offset by X
                tstx                            ; Is this the last byte?
                bne     OP_REPEAT               ; If not, repeat the operation
ROLOP_LAST_BYTE bcc     OP_END                  ; If the carry flag is clear...
                lda     OP_CB
                cmp     #ROLOP_OFFSET           ; Is it a rotate operation?
                bne     OP_END
ROLOP_SET1                                      ; Set the last bit of the last byte to 1
                ldx     OP_IDX                  ; What was the initial offset again?
                decx                            ; Decrement it by one
ROL_EOR_ADDRHI  EQU     *+1                     ; <- Self modifying byte to XOR the last byte with 0x1
ROL_EOR_ADDRLO  EQU     *+2                     ; <- Self modifying byte to XOR the last byte with 0x1
                lda     $C0DE,X                 ; Set the last bit to 1. NOTE: This cannot be done with BSET bc/ it doesn't support indexed addressing modes
                inca
ROL_STA_ADDRHI  EQU     *+1                     ; <- Self modifying byte to store the result
ROL_STA_ADDRLO  EQU     *+2                     ; <- Self modifying byte to store the result
                sta     $C0DE,X                 ; Save the result
OP_END:         lda     #4                      ; Reset the number of bytes to operate on
                sta     OP_IDX
                rts                             ; We are done

;
; COPY_CB doesn't exist because it is the default behavior
;

;
; No parameter callbacks
;
ROL_CB:         rola                            ; Rotate the accumulator left carrying the high bit into the carry flag
                rts

NOT_CB:         eor     #$ff
                rts

;
; 1-byte parameter callbacks
;
SET_CB:         nop                             ; This nop is here so that it becomes aligned with the 2-byte parameter callbacks
                lda     #$C0;DE                 ; <- Self modifying byte to set the left hand side operand address
                rts

;
; 2-byte parameter callbacks
;
ADD_CB:         adc     $C0DE,X                 ; <- Self modifying byte to set the left hand side operand address
                rts

SUB_CB:         sbc     $C0DE,X                 ; <- Self modifying byte to set the left hand side operand address
                rts

AND_CB:         and     $C0DE,X                 ; <- Self modifying byte to set the left hand side operand address
                rts

OR_CB:          ora     $C0DE,X                 ; <- Self modifying byte to set the left hand side operand address
                rts

XOR_CB:         eor     $C0DE,X                 ; <- Self modifying byte to set the left hand side operand address
                rts

RESETCOUNTDOWN
                clr     BTNFLAGS                  ; Stop blinking
                lda     #30
                sta     COUNTDOWN
                sec                               ; Set the carry flag
                ldx     #4                        ; And add it to the time
INCCOUNT        decx
                lda     TCOUNT,X
                adc     #0
                sta     TCOUNT,X
                bne     INCCOUNT
                rts
;
; This callback gets called every second to keep TCOUNT up to date.
;   - The COUNTDOWN variable is decremented
;   - If the COUNTDOWN variable is zero, the countdown is reset to 30 seconds
;     and TCOUNT is incremented by one.
;
SECTIC:
                lda     COUNTDOWN
                deca
                beq     RESETCOUNTDOWN              ; If we are at zero, reset the countdown
                sta     COUNTDOWN
                rts

;
; This is the main initialization routine which is called when we first get the app into memory
;
MAIN:
                lda     #$c1            ; App is loaded, uses system rules for button beeps and second timer
                sta     WRISTAPP_FLAGS
                lda     #30
                sta     COUNTDOWN
                rts

; vim: set expandtab ts=4 sw=4 filetype=asm:
