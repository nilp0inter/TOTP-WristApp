;Name: TOTP WristApp
;Version: TOTP
;Description: TOTP WristApp - by Roberto Abdelkader Martinez Perez
;This is a TOTP generator wristapp for the Timex Datalink, providing secure
;two-factor authentication by generating time-based one-time passwords
;compatible with TOTP-enabled services.
;
;TIP:  Download your watch faster:  Download a WristApp once, then do not send it again.  It stays in the watch!
INCLUDE         "WRISTAPP.I"

;
; Memory Segments Utilization for TOTP Calculator SHA1 Calculations
; -----------------------------------------------------------------
;
; The memory segments listed below are leveraged during the SHA1 hash calculations. These segments are temporarily
; repurposed to accommodate variables specific to the TOTP calculation process, alongside their original intended usage.
;
; Segment $043a-$0462 (40 bytes)
;   - Original Usage:
;       - BUF_PHONENUM (12 bytes): Initially reserved for phone number storage.
;       - EXTRACTBUF (28 bytes): Allocated for data extraction. Documentation discrepancies note it as 32 or 31 bytes.
;           However, practical use determines it effectively as 31 bytes since clearing the 32nd byte also clears the
;           first alarm hours field.
;   - TOTP Variables:
;       - V_A to V_F (6 variables * 4 bytes each): Variables used in intermediate steps of SHA1 calculations.
;       - V_K (4 bytes): Additional variable for SHA1 computation.
;       - V_TEMP1 to V_TEMP3 (3 variables * 4 bytes each): Temporary storage during calculations.
;
;     Note: Of the allocated 40 bytes, 36 are used for TOTP variables (V_A-V_F, V_K, V_TEMP, V_TEMP2) during SHA1
;     calculations. The original variables (BUF_PHONENUM, EXTRACTBUF) are key for EEPROM data recovery outside these
;     computations.
;
; Segment $04d2 (32 bytes)
;   - Original Usage:
;       - MSGBUF (32 bytes): Reserved for message buffering.
;         Note: No adverse effects observed when clearing up to 40 bytes, suggesting some flexibility in the original
;         design.
;   - TOTP Variables:
;       - H_0 to H_4 (5 variables * 4 bytes each): Variables for storing intermediate hash values.
;       - H2_0 to H2_4 (5 variables * 4 bytes each): Additional variables for hash computations, used in the HMAC-SHA1
;       algorithm.
;     Note: Exactly 40 bytes are used for these TOTP variables, fully utilizing the segment during the SHA1 hash
;     calculation phase.
;
; This repurposing of memory segments allows for efficient use of available resources for TOTP SHA1 hash calculations
; without interfering with the original intended uses of these memory areas.
;

V_A_ADDR            EQU     $043a
V_B_ADDR            EQU     $043e
V_C_ADDR            EQU     $0442
V_D_ADDR            EQU     $0446
V_E_ADDR            EQU     $044a
V_F_ADDR            EQU     $044e
V_K_ADDR            EQU     $0452
V_TEMP1_ADDR        EQU     $0456
V_TEMP2_ADDR        EQU     $045a
V_TEMP3_ADDR        EQU     $045e

H_0_ADDR            EQU     $04d2
H_1_ADDR            EQU     $04d6
H_2_ADDR            EQU     $04da
H_3_ADDR            EQU     $04de
H_4_ADDR            EQU     $04e2
H2_0_ADDR           EQU     $04e6
H2_1_ADDR           EQU     $04ea
H2_2_ADDR           EQU     $04ee
H2_3_ADDR           EQU     $04f2
H2_4_ADDR           EQU     $04f6

;
; Multi-byte operations
; ---------------------
;
; The following multi-byte operations are used to perform various operations on multi-byte data. These operations
; include copying data, rotating data, and performing bitwise operations such as AND, OR, and XOR. Each operation is
; identified by a unique code, and the corresponding callback routine is called to perform the operation. The callback
; routine is determined by the operation code and is stored in a table for easy access.
;
COPYOP_OFFSET   EQU     (OP_SAVE-OP_CB)-1
ROLOP_OFFSET    EQU     (ROL_CB-OP_CB)-1
NOTOP_OFFSET    EQU     (NOT_CB-OP_CB)-1
SETOP_OFFSET    EQU     (SET_CB-OP_CB)-1
ADDOP_OFFSET    EQU     (ADD_CB-OP_CB)-1
SUBOP_OFFSET    EQU     (SUB_CB-OP_CB)-1
ANDOP_OFFSET    EQU     (AND_CB-OP_CB)-1
OROP_OFFSET     EQU     (OR_CB-OP_CB)-1
XOROP_OFFSET    EQU     (XOR_CB-OP_CB)-1

MAX_0BYTE_OP    EQU     NOTOP_OFFSET+1
MAX_1BYTE_OP    EQU     SETOP_OFFSET+1

OPR_ADDRHI      EQU     $60
OPR_ADDRLO      EQU     $61
COUNTDOWN       EQU     $62

OFFSET          EQU     $63
TMP             EQU     $64
V_I             EQU     $65

START           EQU     *
;
; (2) System entry point vectors
;
L0110:          jmp     MAIN       ; The main entry point - WRIST_MAIN
L0113:          rts                ; Called when we are suspended for any reason - WRIST_SUSPEND
                nop
                nop
L0116:          jmp     SECTIC     ; Called to handle any timers or time events - WRIST_DOTIC
L0119:          rts                ; Called when the COMM app starts and we have timers pending - WRIST_INCOMM
                nop
                nop
L011c:          rts                ; Called when the COMM app loads new data - WRIST_NEWDATA
                nop
                nop

L011f:          lda     STATETAB0,X ; The state table get routine - WRIST_GETSTATE
                rts

L0123:          jmp     HANDLE_STATE0
                db      STATETAB0-STATETAB0

;
; (3) Program strings
;
S6_SECS:         timex6  "   SEC"
S6_TOTP:         timex6  " TOTP "
S8_GITHUB:       timex   " GITHUB "


;
; These addresses in conjunction with the OFFSET variable are used to
; calculate the absolute address to be used in different parts of the self
; modifying code.
;
LOADBYTE_ADDRHI     EQU     (LOADBYTE / $0100)
LOADBYTE_ADDRLO     EQU     (LOADBYTE & $00FF)

; ONE                 db      $aa,$ff,$00,$01

;
; Multi-byte operation codes
;
COPYOP          EQU     (0 * 4)           ; No callback
ROLOP           EQU     (1 * 4)           ; No parameters
NOTOP           EQU     (2 * 4)           ; No parameters
SETOP           EQU     (3 * 4)           ; 1-byte parameter  @ OPR_ADDRLO
ADDOP           EQU     (4 * 4)           ; 2-byte parameters @ OPR_ADDRHI, OPR_ADDRLO
SUBOP           EQU     (5 * 4)           ; 2-byte parameters @ OPR_ADDRHI, OPR_ADDRLO
ANDOP           EQU     (6 * 4)           ; 2-byte parameters @ OPR_ADDRHI, OPR_ADDRLO
OROP            EQU     (7 * 4)           ; 2-byte parameters @ OPR_ADDRHI, OPR_ADDRLO
XOROP           EQU     (8 * 4)           ; 2-byte parameters @ OPR_ADDRHI, OPR_ADDRLO

;
; This table is used to call the right operation callback
;
OPERATIONS      db      COPYOP_OFFSET & $ff
                db      ROLOP_OFFSET  & $ff
                db      NOTOP_OFFSET  & $ff
                db      SETOP_OFFSET  & $ff
                db      ADDOP_OFFSET  & $ff
                db      SUBOP_OFFSET  & $ff
                db      ANDOP_OFFSET  & $ff
                db      OROP_OFFSET   & $ff
                db      XOROP_OFFSET  & $ff

LHS_SAME_AS_DST_OFFSET      EQU     (LHS_SAME_AS_DST_CB-EXEC_LHS_CB)-1
LHS_CONSTANT_OFFSET         EQU     (LHS_CONSTANT_CB-EXEC_LHS_CB)-1
LHS_V_B_OFFSET              EQU     (LHS_V_B_CB-EXEC_LHS_CB)-1
LHS_V_D_OFFSET              EQU     (LHS_V_D_CB-EXEC_LHS_CB)-1


LHS_CBS         db      LHS_SAME_AS_DST_OFFSET & $ff
                db      LHS_CONSTANT_OFFSET & $ff
                db      LHS_V_B_OFFSET & $ff
                db      LHS_V_D_OFFSET & $ff

LHS_SAME_AS_DST EQU     0
LHS_CONSTANT    EQU     1
LHS_V_B         EQU     2
LHS_V_D         EQU     3

;
; Encoded variables
;
V_ADDR_MODE_OFFSET      EQU (V_ADDR_MODE-LOAD_VAR_CB)-1
H_ADDR_MODE_OFFSET      EQU (H_ADDR_MODE-LOAD_VAR_CB)-1
BUFIDX_ADDR_MODE_OFFSET EQU (BUFIDX_ADDR_MODE-LOAD_VAR_CB)-1
BUFMOD_ADDR_MODE_OFFSET EQU (BUFMOD_ADDR_MODE-LOAD_VAR_CB)-1

ADDR_MODE_CBS   db      V_ADDR_MODE_OFFSET & $ff
                db      H_ADDR_MODE_OFFSET & $ff
                db      BUFIDX_ADDR_MODE_OFFSET & $ff
                db      BUFMOD_ADDR_MODE_OFFSET & $ff

AS_V_ADDR       EQU     0
AS_H_ADDR       EQU     1
AS_BUFIDX_ADDR  EQU     2
AS_BUFMOD_ADDR  EQU     3

V_A             EQU     ((0 * 4) | AS_V_ADDR)
V_B             EQU     ((1 * 4) | AS_V_ADDR)
V_C             EQU     ((2 * 4) | AS_V_ADDR)
V_D             EQU     ((3 * 4) | AS_V_ADDR)
V_E             EQU     ((4 * 4) | AS_V_ADDR)
V_F             EQU     ((5 * 4) | AS_V_ADDR)
V_K             EQU     ((6 * 4) | AS_V_ADDR)
V_TEMP1         EQU     ((7 * 4) | AS_V_ADDR)
V_TEMP2         EQU     ((8 * 4) | AS_V_ADDR)
V_TEMP3         EQU     ((9 * 4) | AS_V_ADDR)
H_0             EQU     ((0 * 4) | AS_H_ADDR)
H_1             EQU     ((1 * 4) | AS_H_ADDR)
H_2             EQU     ((2 * 4) | AS_H_ADDR)
H_3             EQU     ((3 * 4) | AS_H_ADDR)
H_4             EQU     ((4 * 4) | AS_H_ADDR)
H2_0            EQU     ((0 * 4) | AS_H_ADDR)
H2_1            EQU     ((1 * 4) | AS_H_ADDR)
H2_2            EQU     ((2 * 4) | AS_H_ADDR)
H2_3            EQU     ((3 * 4) | AS_H_ADDR)
H2_4            EQU     ((4 * 4) | AS_H_ADDR)

BUFIDX         EQU      ((0 * 4) | AS_BUFIDX_ADDR)
BUFMOD         EQU      ((0 * 4) | AS_BUFMOD_ADDR)

ENDOP           EQU     $ff

; BUFFER:             db      $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00

;
; This table encodes the TOTP algorithm as a series of multi-byte operations
;
; Each operation is encoded as a sequence of bytes:
;   - The first byte is the destination address
;   - The second byte is the RHS operand address
;   - The third bytes contains:
;     - The LHS operand addressing mode in the lower 2 bits
;     - CURRENTLY: The operation code in the upper 6 bits
;     - FUTURE: The operation code in the upper 4 bits
;     - FUTURE: The number of bytes to operate on in the upper 2 bits
;   - (optional) The fourth byte contains the LHS operand
;
OPCODES
INIT_SHA1       db  V_A,H_0,COPYOP | LHS_CONSTANT,20,ENDOP        ; for (i=0; i<20; i++) a[i] = h[i];
TEST            db  BUFIDX,V_TEMP1,SETOP | LHS_CONSTANT,$00       ; time_step = 0;
                db  V_B,V_TEMP1,SETOP | LHS_CONSTANT,$01          ; b = 1;
                db  BUFIDX,V_B,ADDOP | LHS_SAME_AS_DST            ; time_step += b;
                db  BUFIDX,V_B,ADDOP | LHS_SAME_AS_DST,ENDOP      ; time_step += b;
F__I_LT_20      db  V_F,V_C,ANDOP | LHS_V_B                       ; f = (c & b)
                db  V_TEMP1,V_B,NOTOP | LHS_V_B                   ; temp = ~b;
                db  V_TEMP1,V_D,ANDOP | LHS_SAME_AS_DST           ; d = temp & d;
                db  V_F,V_TEMP1,OROP | LHS_SAME_AS_DST,ENDOP      ; f |= temp;
F__I_GTE_80
F__I_LT_40      db  V_F,V_C,XOROP | LHS_V_B                       ; f = (c ^ b)
                db  V_F,V_D,XOROP | LHS_SAME_AS_DST,ENDOP         ; f ^= d;
F__I_LT_60      db  V_F,V_C,ANDOP | LHS_V_B                       ; f = (c & b)
                db  V_TEMP1,V_D,ANDOP | LHS_V_B                   ; temp = (d & b);
                db  V_F,V_TEMP1,OROP | LHS_SAME_AS_DST            ; f |= temp;
                db  V_TEMP1,V_C,ANDOP | LHS_V_D                   ; temp = (c & d);
                db  V_F,V_TEMP1,OROP | LHS_SAME_AS_DST,ENDOP      ; f |= temp;
BUF__I_GTE_16   db  V_TEMP1,BUFMOD,13,SETOP                       ; temp = buffer[(s+13) & MASK]
                db  V_TEMP1,BUFMOD,8,XOROP | LHS_SAME_AS_DST      ; temp ^= buffer[(s+8) & MASK]
                db  V_TEMP1,BUFMOD,2,XOROP | LHS_SAME_AS_DST      ; temp ^= buffer[(s+2) & MASK]
                db  V_TEMP1,BUFMOD,0,XOROP | LHS_SAME_AS_DST      ; temp ^= buffer[s & MASK]
                db  V_TEMP1,V_TEMP1,ROLOP | LHS_SAME_AS_DST       ; temp = ROL(temp, 1);
                db  BUFIDX,V_TEMP1,SETOP | LHS_SAME_AS_DST,ENDOP  ; buffer[s*4] = temp;
SHA1_ASSIGN     db  V_TEMP1,V_A,ROLOP | LHS_CONSTANT,5            ; temp = ROL(a, 5);
                db  V_TEMP1,V_F,ADDOP | LHS_SAME_AS_DST           ; temp += f;
                db  V_TEMP1,V_E,ADDOP | LHS_SAME_AS_DST           ; temp += e;
                db  V_TEMP1,V_K,ADDOP | LHS_SAME_AS_DST           ; temp += k;
                db  V_TEMP1,BUFIDX,ADDOP | LHS_SAME_AS_DST        ; temp += buffer[s*4]
                db  V_E,V_D,SETOP | LHS_SAME_AS_DST               ; e = d;
                db  V_D,V_C,SETOP | LHS_SAME_AS_DST               ; d = c;
                db  V_C,V_D,ROLOP | LHS_CONSTANT,30               ; c = ROL(d, 30);
                db  V_B,V_A,SETOP | LHS_SAME_AS_DST               ; b = a;
                db  V_A,V_TEMP1,SETOP | LHS_SAME_AS_DST,ENDOP     ; a = temp;
SHA1_END        db  H_0,V_A,ADDOP | LHS_SAME_AS_DST               ; h[0] += a;
                db  H_1,V_B,ADDOP | LHS_SAME_AS_DST               ; h[1] += b;
                db  H_2,V_C,ADDOP | LHS_SAME_AS_DST               ; h[2] += c;
                db  H_3,V_D,ADDOP | LHS_SAME_AS_DST               ; h[3] += d;
                db  H_4,V_E,ADDOP | LHS_SAME_AS_DST,ENDOP         ; h[4] += e;

;
; <autogenerated>
; THIS SECTION IS AUTO-GENERATED *** DO NOT MODIFY ***
;

; TIME_STEP is a 4 byte counter that is incremented every 30 seconds
; it is used as the counter for the TOTP algorithm.
%TIME_STEP%

;
; </autogenerated>
;


;
; (4) State Table
;
STATETAB0:
                db      0
                db      EVT_ENTER,TIM_ONCE,0   ; Initial state
                db      EVT_RESUME,TIM_ONCE,0   ; Resume from a nested app
                db      EVT_DNNEXT,TIM2_8TIC,0   ; Next button
                db      EVT_MODE,TIM_ONCE,$FF   ; Mode button
                db      EVT_END


;
; (5) State Table 0 Handler
; This is called to process the state events.  We only see DNNEXT event
;
HANDLE_STATE0:
                bset    1,APP_FLAGS             ; Indicate that we can be suspended
                lda     BTNSTATE                ; Get the event
                cmp     #EVT_DNNEXT
                beq     TESTSTUFF
                ; fall into SHOWBANNER
CLEARIT         jsr     CLEARALL                ; Clear the display
SHOWBANNER      lda     #S6_TOTP-START          ; Get the offset for the second string
                jsr     PUT6MID                 ; and put it on the middle line
                lda     #SYS8_MODE              ; Get the system offset for the 'MODE' string
                jmp     PUTMSGBOT               ; and put it on the bottom line

; FIRSTSHOWCD     jsr     CLEARALL                ; Clear the display
; SHOWCOUNTDOWN
;                 lda     #S8_GITHUB-START
;                 jsr     BANNER8
; SHOWCODE        lda     #S6_SECS-START
;                 jsr     PUT6MID
;                 ldx     COUNTDOWN
;                 cpx     #10                     ; If the countdown is <= 10 seconds
;                 bls     BLINK_SECS              ; Blink the seconds position
;                 jsr     FMTXLEAD0                 ; Otherwise just print the number
;                 jsr     PUTMID12
;                 rts
; BLINK_SECS      ldx     #COUNTDOWN
;                 lda     #BLINK_MID12
;                 jsr     START_BLINKP
;                 bset    2,BTNFLAGS              ; Mark a blink routine as pending
;                 rts

; SHOWNOENTRIES   lda     #SYS6_NO
;                 jsr     PUTMSG1
;                 lda     #S6_TOTP-START
;                 jsr     PUT6MID
;                 lda     #SYS8_ENTRIES
;                 jmp     PUTMSGBOT

; DELETEENTRY     jmp     SAYHOLDTODELETE

TESTSTUFF
                lda     #TEST-OPCODES
                sta     OFFSET
                bsr     EXEC_PROGRAM

                bra     DEBUGUNIX

FIRSTBYTE:      lda     #LOADBYTE_ADDRLO
                sub     OFFSET
                sta     LOADBYTE+1
                lda     #LOADBYTE_ADDRHI
                sbc     #0
                sta     LOADBYTE
                clr     OFFSET
NEXTBYTE:       ldx     OFFSET
LOADBYTE        EQU     *+1
                lda     $4000,X
                inc     OFFSET
GETBYTE:
                sta     DATDIGIT2               ; And save it away
                lsra                            ; Extract the high nibble
                lsra
                lsra
                lsra

                sta     DATDIGIT1               ; And save it
                lda     DATDIGIT2               ; Get the byte again
                and     #$0f                    ; Extract the low nibble
                sta     DATDIGIT2               ; And save it
                rts

DEBUGUNIX:      jsr     CLEARALL                ; Clear the display
                lda     #LOADBYTE-TIME_STEP
                sta     OFFSET

                bsr     FIRSTBYTE
                jsr     PUTTOP12

                bsr     NEXTBYTE
                jsr     PUTTOP34

                bsr     NEXTBYTE
                jsr     PUTTOP56

                bsr     NEXTBYTE
                jmp     PUTMID12

;
; LOAD_VAR_ADDR
;    Given an encoded variable address, decode it into the OPR_ADDRHI and OPR_ADDRLO variables
;    An encoded variable address has the following format:
;      - The lower two bits are the addressing modes.
;      - The next 6 bits are a parameter to the addressing mode callback
;  Parameters:
;    A - The encoded variable address
;  Returns:
;    TODO
;
LOAD_VAR_ADDR:  tax                         ; Save a copy of the encoded variable address
                and     #$fc                ; Get the addressing offset (the upper 6 bits)
                sta     OPR_ADDRLO          ; Save the addressing offset to the low byte of the variable address
                txa                         ; Restore the encoded variable address
                and     #$03                ; Get the addressing mode
                tax                         ; Use it as an index
                lda     ADDR_MODE_CBS,X     ; Get the addressing mode callback
                sta     LOAD_VAR_CB         ; Modify the LOAD_VAR_CB routine to call the right callback
LOAD_VAR_CB     EQU     *+1                 ; <- Self modifying byte to get the right callback
                bra     V_ADDR_MODE         ; Call the right callback

V_ADDR_MODE:    lda     #(V_A_ADDR & $ff)
                add     OPR_ADDRLO
                tax
                lda     #(V_A_ADDR / $0100)
                adc     #0                  ; Not needed? TODO: Check it
                rts

H_ADDR_MODE:    lda     #(H_0_ADDR & $ff)
                add     OPR_ADDRLO
                tax
                lda     #(H_0_ADDR / $0100)
                adc     #0                  ; Not needed? TODO: Check it
                rts

; ATM this is used for testing
BUFIDX_ADDR_MODE:
                lda     #(TIME_STEP / $0100)
                ldx     #(TIME_STEP & $00ff)
                rts

BUFMOD_ADDR_MODE:
                ; lda     #(BUFFER / $0100)
                ; sta     OPR_ADDRHI
                ; lda     #(BUFFER & $00ff)
                ; sta     OPR_ADDRLO
                ; lda     V_I
                ; and     #$f
                ; sta     TMP
                ; bsr     READ_OPCODE         ; Read the offset
                ; add     TMP
                ; and     #$f
                ; lsla
                ; lsla                        ; Multiply by 4
                ; sub     OPR_ADDRLO
                ; tax
                ; sbc     OPR_ADDRHI
                rts

;
; EXEC_PROGRAM
;   Run the program pointed to by the OFFSET variable
;
EXEC_PROGRAM:
                bsr     READ_OPCODE
                cmp     #ENDOP
                bne     EXEC_INSTR
                rts

                ; Set the DST part of the operation or exit if we are done
EXEC_INSTR:     bsr     LOAD_VAR_ADDR
                bsr     SET_OP_DST

                ; Set the RHS part of the operation
                bsr     READ_OPCODE
                bsr     LOAD_VAR_ADDR
                bsr     SET_OP_RHS

                ; Set the LHS part of the operation if needed
                bsr     READ_OPCODE
                sta     TMP
                and     #$03                    ; Get the LHS addressing mode, encoded as the lower 2 bits
                tax                             ; Use it as an index
                lda     LHS_CBS,X
                sta     EXEC_LHS_CB
EXEC_LHS_CB     EQU     *+1                     ; <- Self modifying byte to get the right callback
                bsr     LHS_SAME_AS_DST_CB

                ; Perform the operation and continue with the next one
                lda     TMP
                lsra
                lsra
                tax
                bsr     DO_OP
                bra     EXEC_PROGRAM

LHS_SAME_AS_DST_CB:
                lda     OP_DST_ADDRHI
                sta     OPR_ADDRHI
                lda     OP_DST_ADDRLO
                sta     OPR_ADDRLO
                rts

LHS_CONSTANT_CB:
                bsr     READ_OPCODE
                sta     OPR_ADDRLO
                rts

LHS_V_B_CB:
                lda     #(V_B_ADDR / $0100)
                sta     OPR_ADDRHI
                lda     #(V_B_ADDR & $00ff)
                sta     OPR_ADDRLO
                rts

LHS_V_D_CB:
                lda     #(V_D_ADDR / $0100)
                sta     OPR_ADDRHI
                lda     #(V_D_ADDR & $00ff)
                sta     OPR_ADDRLO
                rts

;
; READ_OPCODE
;   This routine is called to read current opcode pointed to by the OFFSET variable
; Parameters:
;   OFFSET - The offset to read the opcode from
; Returns:
;   A - The opcode is read from the OFFSET variable
;   The offset is incremented by one
;
READ_OPCODE:
                ldx     OFFSET
                lda     OPCODES,X
                inc     OFFSET
                rts
;
; SET_OP_LHS
;    Set the left hand side address for a multi-byte operation
;  Parameters:
;    A - The high byte of the left hand side address
;    X - The low byte of the left hand side address
;  Returns:
;    The left hand side address is set in the OPR_ADDRHI and OPR_ADDRLO variables
;
SET_OP_LHS:     sta     OPR_ADDRHI
                stx     OPR_ADDRLO
                rts

;
; SET_OP_DST
;    Set the destination address for a multi-byte operation
;  Parameters:
;    A - The high byte of the destination address
;    X - The low byte of the destination address
;
SET_OP_DST:     sta     OP_DST_ADDRHI
                sta     ROL_EOR_ADDRHI
                sta     ROL_STA_ADDRHI
                stx     OP_DST_ADDRLO
                stx     ROL_EOR_ADDRLO
                stx     ROL_STA_ADDRLO
                rts

;
; SET_OP_RHS
;    Set the right hand side address for a multi-byte operation
;  Parameters:
;    A - The high byte of the right hand side address
;    X - The low byte of the right hand side address
;
SET_OP_RHS:     sta     OP_RHS_ADDRHI
                stx     OP_RHS_ADDRLO
                rts

;
; DO_OP
;    Perform a multi-byte operation.
;  Requires:
;    The destination address should have been set with the SET_OP_DST routine
;    The right hand side address (if needed) should have been set with the SET_OP_RHS routine
;  Parameters:
;    X - The operation to perform (See the multi-byte operation codes above)
;    OPR_ADDRHI - The high byte of the left hand side address (for 2-byte operations)
;    OPR_ADDRLO - The low byte of the left hand side address (for 1-byte and 2-byte operations)
;    OP_IDX - The number of bytes to operate on (4 by default and reset after every call)
;
DO_OP:          lda     OPERATIONS,X            ; Get the operation call back offset from the table
                sta     OP_CB                   ; Modify the OPERATION routine to call the right callback
                tax                             ; We need the callback offset in X to use it as an index
                cmp     #MAX_0BYTE_OP           ; Now depending on the operation we need to set the right parameters for the parameter setting
                blo     OP_READY                ; If it is a 0-byte operation we are done
                cmp     #MAX_1BYTE_OP           ; Is it a 1-byte operation?
                blo     OP_SET1                 ; If so we need to set the low byte of the left hand side address
OP_SET2:        lda     OPR_ADDRHI              ; Apparently it is a 2-byte operation. Get the high byte of the left hand side address
                sta     OP_CB+2,X               ; And set it in the callback
OP_SET1:        lda     OPR_ADDRLO              ; Get the low byte of the left hand side address
                sta     OP_CB+3,X               ; And set it in the callback
OP_READY:       txa                             ; We need back the operation in ACCA
                clc                             ; Some operations' logic depend on the carry flag being clear
OP_IDX          EQU     *+1                     ; <- Self modifying byte to set the number of bytes to operate on
                ldx     #4                      ; By default we are going to operate on 4 bytes
OP_REPEAT:      decx                            ; Decrement the counter by one
OP_RHS_ADDRHI   EQU     *+1                     ; <- Self modifying byte to set the high byte of the right hand side operand address
OP_RHS_ADDRLO   EQU     *+2                     ; <- Self modifying byte to set the low byte of the right hand side operand address
                lda     $C0DE,X                 ; Get the right hand side byte offset by X
OP_CB           EQU     *+1                     ; <- Self modifying byte to set the operation callback
                bsr     OP_SAVE                 ; Call the right operation callback
OP_DST_ADDRHI   EQU     *+1                     ; <- Self modifying byte to get the destination address
OP_DST_ADDRLO   EQU     *+2                     ; <- Self modifying byte to get the destination address
OP_SAVE:        sta     $C0DE,X                 ; Save the result offset by X
                tstx                            ; Is this the last byte?
                bne     OP_REPEAT               ; If not, repeat the operation
ROLOP_LAST_BYTE bcc     OP_END                  ; If the carry flag is clear...
                lda     OP_CB
                cmp     #ROLOP_OFFSET           ; Is it a rotate operation?
                bne     OP_END
ROLOP_SET1                                      ; Set the last bit of the last byte to 1
                ldx     OP_IDX                  ; What was the initial offset again?
                decx                            ; Decrement it by one
ROL_EOR_ADDRHI  EQU     *+1                     ; <- Self modifying byte to XOR the last byte with 0x1
ROL_EOR_ADDRLO  EQU     *+2                     ; <- Self modifying byte to XOR the last byte with 0x1
                lda     $C0DE,X                 ; Set the last bit to 1. NOTE: This cannot be done with BSET bc/ it doesn't support indexed addressing modes
                inca
ROL_STA_ADDRHI  EQU     *+1                     ; <- Self modifying byte to store the result
ROL_STA_ADDRLO  EQU     *+2                     ; <- Self modifying byte to store the result
                sta     $C0DE,X                 ; Save the result
OP_END:         lda     #4                      ; Reset the number of bytes to operate on
                sta     OP_IDX
                rts                             ; We are done

;
; COPY_CB doesn't exist because it is the default behavior
;

;
; No parameter callbacks
;
ROL_CB:         rola                            ; Rotate the accumulator left carrying the high bit into the carry flag
                rts

NOT_CB:         eor     #$ff
                rts

;
; 1-byte parameter callbacks
;
SET_CB:         nop                             ; This nop is here so that it becomes aligned with the 2-byte parameter callbacks
SET_CB_VALUE    EQU     *+1                     ; <- Self modifying byte to set the value to set
                lda     #$C0;DE                 ; <- Self modifying byte to set the left hand side operand address
                sta     TMP
                clra
                sta     SET_CB_VALUE
                lda     TMP
                rts

;
; 2-byte parameter callbacks
;
ADD_CB:         adc     $C0DE,X                 ; <- Self modifying byte to set the left hand side operand address
                rts

SUB_CB:         sbc     $C0DE,X                 ; <- Self modifying byte to set the left hand side operand address
                rts

AND_CB:         and     $C0DE,X                 ; <- Self modifying byte to set the left hand side operand address
                rts

OR_CB:          ora     $C0DE,X                 ; <- Self modifying byte to set the left hand side operand address
                rts

XOR_CB:         eor     $C0DE,X                 ; <- Self modifying byte to set the left hand side operand address
                rts


RESETCOUNTDOWN
                clr     BTNFLAGS                  ; Stop blinking
                lda     #30
                sta     COUNTDOWN
                sec                               ; Set the carry flag
                ldx     #4                        ; And add it to the time
INCCOUNT        decx
                lda     TIME_STEP,X
                adc     #0
                sta     TIME_STEP,X
                bne     INCCOUNT
                rts
;
; This callback gets called every second to keep TIME_STEP up to date.
;   - The COUNTDOWN variable is decremented
;   - If the COUNTDOWN variable is zero, the countdown is reset to 30 seconds
;     and TIME_STEP is incremented by one.
;
SECTIC:
                lda     COUNTDOWN
                deca
                beq     RESETCOUNTDOWN              ; If we are at zero, reset the countdown
                sta     COUNTDOWN
                rts

;
; This is the main initialization routine which is called when we first get the app into memory
;
MAIN:
                lda     #$c1            ; App is loaded, uses system rules for button beeps and second timer
                sta     WRISTAPP_FLAGS
                lda     #30
                sta     COUNTDOWN
                rts

; vim: set expandtab ts=4 sw=4 filetype=asm textwidth=120:
