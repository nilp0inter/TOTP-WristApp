;Name: TOTP WristApp
;Version: TOTP
;Description: TOTP WristApp - by Roberto Abdelkader Martinez Perez
;This is a TOTP generator wristapp for the Timex Datalink, providing secure
;two-factor authentication by generating time-based one-time passwords
;compatible with TOTP-enabled services.
;
;TIP:  Download your watch faster:  Download a WristApp once, then do not send it again.  It stays in the watch!
INCLUDE         "WRISTAPP.I"
;
; (1) Program specific constants
;
; SECS_DIG1       EQU     $63
; SECS_DIG2       EQU     $64
COUNTDOWN       EQU     $63

;   Bit 0 indicates that we want to show the segments instead of the message
;
START           EQU     *
;
; (2) System entry point vectors
L0110:          jmp     MAIN       ; The main entry point - WRIST_MAIN
L0113:          rts                ; Called when we are suspended for any reason - WRIST_SUSPEND
                nop
                nop
L0116:          jmp     SECTIC     ; Called to handle any timers or time events - WRIST_DOTIC
L0119:          rts                ; Called when the COMM app starts and we have timers pending - WRIST_INCOMM
                nop
                nop
L011c:          rts                ; Called when the COMM app loads new data - WRIST_NEWDATA
                nop
                nop

L011f:          lda     STATETAB0,X ; The state table get routine - WRIST_GETSTATE
                rts

L0123:          jmp     HANDLE_STATE0
                db      STATETAB0-STATETAB0
; L0127:          jmp     HANDLE_STATE1
;                 db      STATETAB1-STATETAB0
;
; (3) Program strings
S6_SECS:        timex6  "   SEC"
S6_TOTP:        timex6  " TOTP "

;
; <autogenerated>
; THIS SECTION IS AUTO-GENERATED *** DO NOT MODIFY ***
;
%TCOUNT%
;
; </autogenerated>
;


;
; (4) State Table
STATETAB0:
                db      0
                db      EVT_ENTER,TIM_ONCE,0   ; Initial state
                ; db      EVT_TIMER2,TIM_ONCE,0
                db      EVT_RESUME,TIM_ONCE,0   ; Resume from a nested app
                db      EVT_DNNEXT,TIM_ONCE,0   ; Next button
                db      EVT_DNPREV,TIM_ONCE,0   ; Prev button
                db      EVT_DNSET,TIM_ONCE,0   ; Set button
                db      EVT_MODE,TIM_ONCE,$FF   ; Mode button
                db      EVT_END

; STATETAB1:
;                 db      1
;                 db      EVT_MODE,TIM_ONCE,$FF     ; Mode button
;                 db      EVT_END

;
; (5) State Table 0 Handler
; This is called to process the state events.  We only see ENTER, RESUME, and DNNEXT events
;
HANDLE_STATE0:
                bset    1,APP_FLAGS             ; Indicate that we can be suspended
                lda     BTNSTATE                ; Get the event
                cmp     #EVT_DNNEXT
                beq     SHOWCOUNTDOWN
                cmp     #EVT_DNPREV
                beq     SHOWNOENTRIES
                cmp     #EVT_DNSET
                beq     DELETEENTRY
                ; fall into SHOWBANNER
SHOWBANNER      jsr     CLEARALL                ; Clear the display
                lda     #S6_TOTP-START          ; Get the offset for the second string
                jsr     PUT6MID                 ; and put it on the middle line
                lda     #SYS8_MODE              ; Get the system offset for the 'MODE' string
                jmp     PUTMSGBOT               ; and put it on the bottom line

SHOWCOUNTDOWN   jsr     CLEARALL                ; Clear the display
                lda     #S6_SECS-START
                jsr     PUT6MID
                ldx     COUNTDOWN
                cpx     #10                     ; If the countdown is <= 10 seconds
                bls     BLINK_SECS              ; Blink the seconds position
                jsr     FMTXLEAD0                 ; Otherwise just print the number
                jsr     PUTMID12
                rts
BLINK_SECS      ldx     #COUNTDOWN
                lda     #BLINK_MID12
                jsr     START_BLINKP
                bset    2,BTNFLAGS              ; Mark a blink routine as pending
                rts

SHOWNOENTRIES   lda     #SYS6_NO
                jsr     PUTMSG1
                lda     #S6_TOTP-START
                jsr     PUT6MID
                lda     #SYS8_ENTRIES
                jmp     PUTMSGBOT

DELETEENTRY     jmp     SAYHOLDTODELETE
; GETBYTE
;                 sta     DATDIGIT2               ; And save it away
;                 lsra                            ; Extract the high nibble
;                 lsra
;                 lsra
;                 lsra

;                 sta     DATDIGIT1               ; And save it
;                 lda     DATDIGIT2               ; Get the byte again
;                 and     #$0f                    ; Extract the low nibble
;                 sta     DATDIGIT2               ; And save it
;                 rts

RESETCOUNTDOWN
                clr     BTNFLAGS                  ; Stop blinking
                lda     #30
                sta     COUNTDOWN
                lda     TCOUNT
                add     #1
                sta     TCOUNT
                lda     TCOUNT+1
                adc     #0
                sta     TCOUNT+1
                lda     TCOUNT+2
                adc     #0
                sta     TCOUNT+2
                lda     TCOUNT+3
                adc     #0
                sta     TCOUNT+3
                rts

; DEBUGUNIX
;                 lda     TCOUNT+3
;                 bsr     GETBYTE
;                 jsr     PUTTOP12

;                 lda     TCOUNT+2
;                 bsr     GETBYTE
;                 jsr     PUTTOP34

;                 lda     TCOUNT+1
;                 bsr     GETBYTE
;                 jsr     PUTTOP56

;                 lda     TCOUNT
;                 bsr     GETBYTE
;                 jsr     PUTMID12

;                 rts

;
; This callback gets called every second
;
SECTIC:
                lda     COUNTDOWN
                deca
                beq     RESETCOUNTDOWN
                sta     COUNTDOWN
                rts

; HANDLE_STATE1:
;                 bset        1,APP_FLAGS                 ; Indicate that we can be suspended
;                 bra         SHOWCOUNTDOWN

;
; (6) Our only real piece of working code...
;
; (7) This is the main initialization routine which is called when we first get the app into memory
;
MAIN:
                lda     #$c1            ; App is loaded, uses system rules for button beeps and second timer
                sta     WRISTAPP_FLAGS
                lda     #30
                sta     COUNTDOWN
                rts
